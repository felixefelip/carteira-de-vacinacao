# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activestorage` gem.
# Please instead update this file by running `bin/tapioca gem activestorage`.

class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
  def __callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
  def __callbacks?; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _before_commit_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _commit_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _create_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _destroy_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _find_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _initialize_callbacks; end

  # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _rollback_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_commit_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_create_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_destroy_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_find_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_initialize_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_rollback_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_save_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_touch_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_update_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_validate_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#823
  def _run_validation_callbacks(&block); end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _save_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _touch_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _update_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _validate_callbacks; end

  # source://activesupport/6.1.7/lib/active_support/callbacks.rb#835
  def _validation_callbacks; end

  # source://activemodel/6.1.7/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/6.1.7/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/6.1.7/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/6.1.7/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activestorage//lib/active_storage/reflection.rb#43
  def attachment_reflections; end

  # source://activestorage//lib/active_storage/reflection.rb#43
  def attachment_reflections?; end

  # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#72
  def attribute_aliases; end

  # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#72
  def attribute_aliases?; end

  # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers; end

  # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers?; end

  # source://activerecord/6.1.7/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/6.1.7/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/6.1.7/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/6.1.7/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/6.1.7/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/6.1.7/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#144
  def column_for_attribute(*_arg0, &_arg1); end

  # source://activerecord/6.1.7/lib/active_record/core.rb#150
  def default_connection_handler; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#150
  def default_connection_handler?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#152
  def default_role; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#152
  def default_role?; end

  # source://activerecord/6.1.7/lib/active_record/scoping/default.rb#11
  def default_scope_override; end

  # source://activerecord/6.1.7/lib/active_record/scoping/default.rb#10
  def default_scopes; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#154
  def default_shard; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#154
  def default_shard?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#77
  def default_timezone; end

  # source://activerecord/6.1.7/lib/active_record/enum.rb#109
  def defined_enums; end

  # source://activerecord/6.1.7/lib/active_record/enum.rb#109
  def defined_enums?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#39
  def destroy_association_async_job; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#107
  def dump_schema_after_migration; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#116
  def dump_schemas; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#94
  def error_on_ignored_order; end

  # source://activemodel/6.1.7/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/6.1.7/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#153
  def index_nested_attribute_errors; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#156
  def legacy_connection_handling; end

  # source://activerecord/6.1.7/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/6.1.7/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#20
  def logger; end

  # source://activemodel/6.1.7/lib/active_model/naming.rb#237
  def model_name(*_arg0, &_arg1); end

  # source://activerecord/6.1.7/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/6.1.7/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/dirty.rb#17
  def partial_writes; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/dirty.rb#17
  def partial_writes?; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#136
  def pluralize_table_names; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#136
  def pluralize_table_names?; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#130
  def primary_key_prefix_type; end

  # source://activerecord/6.1.7/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/6.1.7/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/6.1.7/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#87
  def schema_format; end

  # source://activerecord/6.1.7/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/6.1.7/lib/active_record/inheritance.rb#41
  def store_full_class_name; end

  # source://activerecord/6.1.7/lib/active_record/inheritance.rb#41
  def store_full_class_name?; end

  # source://activerecord/6.1.7/lib/active_record/inheritance.rb#45
  def store_full_sti_class; end

  # source://activerecord/6.1.7/lib/active_record/inheritance.rb#45
  def store_full_sti_class?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#130
  def suppress_multiple_database_warning; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#132
  def table_name_prefix; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#132
  def table_name_prefix?; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#133
  def table_name_suffix; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#133
  def table_name_suffix?; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#64
  def time_zone_aware_attributes; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def time_zone_aware_types; end

  # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def time_zone_aware_types?; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#99
  def timestamped_migrations; end

  # source://activerecord/6.1.7/lib/active_record/model_schema.rb#144
  def type_for_attribute(*_arg0, &_arg1); end

  # source://activerecord/6.1.7/lib/active_record/core.rb#160
  def use_yaml_unsafe_load; end

  # source://activemodel/6.1.7/lib/active_model/validations.rb#48
  def validation_context; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#27
  def verbose_query_logs; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#124
  def warn_on_records_fetched_greater_than; end

  # source://activerecord/6.1.7/lib/active_record/core.rb#164
  def yaml_column_permitted_classes; end

  private

  # source://activemodel/6.1.7/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks?; end

    # source://activerecord/6.1.7/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/6.1.7/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/6.1.7/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _before_commit_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _before_commit_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _commit_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _commit_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _create_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _create_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _destroy_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _destroy_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _find_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _find_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _initialize_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _initialize_callbacks=(value); end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _rollback_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _rollback_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _save_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _save_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _touch_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _touch_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _update_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _update_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _validate_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _validate_callbacks=(value); end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#827
    def _validation_callbacks; end

    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#831
    def _validation_callbacks=(value); end

    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#140
    def action_on_strict_loading_violation; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#140
    def action_on_strict_loading_violation=(val); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#288
    def allow_unsafe_raw_sql; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#292
    def allow_unsafe_raw_sql=(value); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activestorage//lib/active_storage/reflection.rb#43
    def attachment_reflections; end

    # source://activestorage//lib/active_storage/reflection.rb#43
    def attachment_reflections=(value); end

    # source://activestorage//lib/active_storage/reflection.rb#43
    def attachment_reflections?; end

    # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#72
    def attribute_aliases; end

    # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#72
    def attribute_aliases=(value); end

    # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#72
    def attribute_aliases?; end

    # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers; end

    # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers=(value); end

    # source://activemodel/6.1.7/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers?; end

    # source://activerecord/6.1.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/6.1.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/6.1.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/6.1.7/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#134
    def belongs_to_required_by_default; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#134
    def belongs_to_required_by_default=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#134
    def belongs_to_required_by_default?; end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/6.1.7/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#69
    def configurations; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#63
    def configurations=(config); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#255
    def connected_to_stack; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#269
    def connection_class; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#265
    def connection_class=(b); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#273
    def connection_class?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#277
    def connection_classes; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#168
    def connection_handler; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#172
    def connection_handler=(handler); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#176
    def connection_handlers; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#184
    def connection_handlers=(handlers); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#242
    def current_preventing_writes; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#201
    def current_role; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#223
    def current_shard; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#150
    def default_connection_handler; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#150
    def default_connection_handler=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#150
    def default_connection_handler?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#152
    def default_role; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#152
    def default_role=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#152
    def default_role?; end

    # source://activerecord/6.1.7/lib/active_record/scoping/default.rb#11
    def default_scope_override; end

    # source://activerecord/6.1.7/lib/active_record/scoping/default.rb#11
    def default_scope_override=(value); end

    # source://activerecord/6.1.7/lib/active_record/scoping/default.rb#10
    def default_scopes; end

    # source://activerecord/6.1.7/lib/active_record/scoping/default.rb#10
    def default_scopes=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#154
    def default_shard; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#154
    def default_shard=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#154
    def default_shard?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#77
    def default_timezone; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#77
    def default_timezone=(val); end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums; end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums=(value); end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#39
    def destroy_association_async_job; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#39
    def destroy_association_async_job=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#107
    def dump_schema_after_migration; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#107
    def dump_schema_after_migration=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#116
    def dump_schemas; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#116
    def dump_schemas=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#94
    def error_on_ignored_order; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#94
    def error_on_ignored_order=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#148
    def has_many_inversing; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#148
    def has_many_inversing=(val); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#138
    def immutable_strings_by_default; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#138
    def immutable_strings_by_default=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#138
    def immutable_strings_by_default?; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#137
    def implicit_order_column; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#137
    def implicit_order_column=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#137
    def implicit_order_column?; end

    # source://activemodel/6.1.7/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/6.1.7/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/6.1.7/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#153
    def index_nested_attribute_errors; end

    # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#153
    def index_nested_attribute_errors=(val); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#135
    def internal_metadata_table_name; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#135
    def internal_metadata_table_name=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#135
    def internal_metadata_table_name?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#156
    def legacy_connection_handling; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#156
    def legacy_connection_handling=(val); end

    # source://activerecord/6.1.7/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/6.1.7/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/6.1.7/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/6.1.7/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/6.1.7/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#20
    def logger=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#132
    def maintain_test_schema; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#132
    def maintain_test_schema=(val); end

    # source://activerecord/6.1.7/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/6.1.7/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/6.1.7/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/dirty.rb#17
    def partial_writes; end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/dirty.rb#17
    def partial_writes=(value); end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/dirty.rb#17
    def partial_writes?; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#136
    def pluralize_table_names; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#136
    def pluralize_table_names=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#136
    def pluralize_table_names?; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#130
    def primary_key_prefix_type; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#130
    def primary_key_prefix_type=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#33
    def queues; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#33
    def queues=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#146
    def reading_role; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#146
    def reading_role=(val); end

    # source://activerecord/6.1.7/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/6.1.7/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/6.1.7/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#87
    def schema_format; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#87
    def schema_format=(val); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#134
    def schema_migrations_table_name; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#134
    def schema_migrations_table_name=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#134
    def schema_migrations_table_name?; end

    # source://activerecord/6.1.7/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/6.1.7/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(val); end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/6.1.7/lib/active_record/inheritance.rb#41
    def store_full_class_name; end

    # source://activerecord/6.1.7/lib/active_record/inheritance.rb#41
    def store_full_class_name=(value); end

    # source://activerecord/6.1.7/lib/active_record/inheritance.rb#41
    def store_full_class_name?; end

    # source://activerecord/6.1.7/lib/active_record/inheritance.rb#45
    def store_full_sti_class; end

    # source://activerecord/6.1.7/lib/active_record/inheritance.rb#45
    def store_full_sti_class=(value); end

    # source://activerecord/6.1.7/lib/active_record/inheritance.rb#45
    def store_full_sti_class?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#142
    def strict_loading_by_default; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#142
    def strict_loading_by_default=(value); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#142
    def strict_loading_by_default?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#300
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#130
    def suppress_multiple_database_warning; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#130
    def suppress_multiple_database_warning=(val); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#132
    def table_name_prefix; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#132
    def table_name_prefix=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#132
    def table_name_prefix?; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#133
    def table_name_suffix; end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#133
    def table_name_suffix=(value); end

    # source://activerecord/6.1.7/lib/active_record/model_schema.rb#133
    def table_name_suffix?; end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#64
    def time_zone_aware_attributes; end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#64
    def time_zone_aware_attributes=(val); end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def time_zone_aware_types; end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def time_zone_aware_types=(value); end

    # source://activerecord/6.1.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def time_zone_aware_types?; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#99
    def timestamped_migrations; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#99
    def timestamped_migrations=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#160
    def use_yaml_unsafe_load; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#160
    def use_yaml_unsafe_load=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#27
    def verbose_query_logs; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#27
    def verbose_query_logs=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#124
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#124
    def warn_on_records_fetched_greater_than=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#144
    def writing_role; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#144
    def writing_role=(val); end

    # source://activerecord/6.1.7/lib/active_record/core.rb#164
    def yaml_column_permitted_classes; end

    # source://activerecord/6.1.7/lib/active_record/core.rb#164
    def yaml_column_permitted_classes=(val); end
  end
end

# source://activestorage//lib/active_storage/gem_version.rb#3
module ActiveStorage
  extend ::ActiveSupport::Autoload

  # source://activestorage//lib/active_storage.rb#51
  def analyzers; end

  # source://activestorage//lib/active_storage.rb#51
  def analyzers=(val); end

  # source://activestorage//lib/active_storage.rb#57
  def binary_content_type; end

  # source://activestorage//lib/active_storage.rb#57
  def binary_content_type=(val); end

  # source://activestorage//lib/active_storage.rb#59
  def content_types_allowed_inline; end

  # source://activestorage//lib/active_storage.rb#59
  def content_types_allowed_inline=(val); end

  # source://activestorage//lib/active_storage.rb#58
  def content_types_to_serve_as_binary; end

  # source://activestorage//lib/active_storage.rb#58
  def content_types_to_serve_as_binary=(val); end

  # source://activestorage//lib/active_storage.rb#355
  def draw_routes; end

  # source://activestorage//lib/active_storage.rb#355
  def draw_routes=(val); end

  # source://activestorage//lib/active_storage.rb#44
  def logger; end

  # source://activestorage//lib/active_storage.rb#44
  def logger=(val); end

  # source://activestorage//lib/active_storage.rb#53
  def paths; end

  # source://activestorage//lib/active_storage.rb#53
  def paths=(val); end

  # source://activestorage//lib/active_storage.rb#50
  def previewers; end

  # source://activestorage//lib/active_storage.rb#50
  def previewers=(val); end

  # source://activestorage//lib/active_storage.rb#48
  def queues; end

  # source://activestorage//lib/active_storage.rb#48
  def queues=(val); end

  # source://activestorage//lib/active_storage.rb#358
  def replace_on_assign_to_many; end

  # source://activestorage//lib/active_storage.rb#358
  def replace_on_assign_to_many=(val); end

  # source://activestorage//lib/active_storage.rb#356
  def resolve_model_to_route; end

  # source://activestorage//lib/active_storage.rb#356
  def resolve_model_to_route=(val); end

  # source://activestorage//lib/active_storage.rb#354
  def routes_prefix; end

  # source://activestorage//lib/active_storage.rb#354
  def routes_prefix=(val); end

  # source://activestorage//lib/active_storage.rb#352
  def service_urls_expire_in; end

  # source://activestorage//lib/active_storage.rb#352
  def service_urls_expire_in=(val); end

  # source://activestorage//lib/active_storage.rb#61
  def supported_image_processing_methods; end

  # source://activestorage//lib/active_storage.rb#61
  def supported_image_processing_methods=(val); end

  # source://activestorage//lib/active_storage.rb#359
  def track_variants; end

  # source://activestorage//lib/active_storage.rb#359
  def track_variants=(val); end

  # source://activestorage//lib/active_storage.rb#350
  def unsupported_image_processing_arguments; end

  # source://activestorage//lib/active_storage.rb#350
  def unsupported_image_processing_arguments=(val); end

  # source://activestorage//lib/active_storage.rb#55
  def variable_content_types; end

  # source://activestorage//lib/active_storage.rb#55
  def variable_content_types=(val); end

  # source://activestorage//lib/active_storage.rb#46
  def variant_processor; end

  # source://activestorage//lib/active_storage.rb#46
  def variant_processor=(val); end

  # source://activestorage//lib/active_storage.rb#45
  def verifier; end

  # source://activestorage//lib/active_storage.rb#45
  def verifier=(val); end

  # source://activestorage//lib/active_storage.rb#361
  def video_preview_arguments; end

  # source://activestorage//lib/active_storage.rb#361
  def video_preview_arguments=(val); end

  # source://activestorage//lib/active_storage.rb#56
  def web_image_content_types; end

  # source://activestorage//lib/active_storage.rb#56
  def web_image_content_types=(val); end

  class << self
    # source://activestorage//lib/active_storage.rb#51
    def analyzers; end

    # source://activestorage//lib/active_storage.rb#51
    def analyzers=(val); end

    # source://activestorage//lib/active_storage.rb#57
    def binary_content_type; end

    # source://activestorage//lib/active_storage.rb#57
    def binary_content_type=(val); end

    # source://activestorage//lib/active_storage.rb#59
    def content_types_allowed_inline; end

    # source://activestorage//lib/active_storage.rb#59
    def content_types_allowed_inline=(val); end

    # source://activestorage//lib/active_storage.rb#58
    def content_types_to_serve_as_binary; end

    # source://activestorage//lib/active_storage.rb#58
    def content_types_to_serve_as_binary=(val); end

    # source://activestorage//lib/active_storage.rb#355
    def draw_routes; end

    # source://activestorage//lib/active_storage.rb#355
    def draw_routes=(val); end

    # Returns the version of the currently loaded Active Storage as a <tt>Gem::Version</tt>.
    #
    # source://activestorage//lib/active_storage/gem_version.rb#5
    def gem_version; end

    # source://activestorage//lib/active_storage.rb#44
    def logger; end

    # source://activestorage//lib/active_storage.rb#44
    def logger=(val); end

    # source://activestorage//lib/active_storage.rb#53
    def paths; end

    # source://activestorage//lib/active_storage.rb#53
    def paths=(val); end

    # source://activestorage//lib/active_storage.rb#50
    def previewers; end

    # source://activestorage//lib/active_storage.rb#50
    def previewers=(val); end

    # source://activestorage//lib/active_storage.rb#48
    def queues; end

    # source://activestorage//lib/active_storage.rb#48
    def queues=(val); end

    # source://railties/6.1.7/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/6.1.7/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/6.1.7/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://activestorage//lib/active_storage.rb#358
    def replace_on_assign_to_many; end

    # source://activestorage//lib/active_storage.rb#358
    def replace_on_assign_to_many=(val); end

    # source://activestorage//lib/active_storage.rb#356
    def resolve_model_to_route; end

    # source://activestorage//lib/active_storage.rb#356
    def resolve_model_to_route=(val); end

    # source://activestorage//lib/active_storage.rb#354
    def routes_prefix; end

    # source://activestorage//lib/active_storage.rb#354
    def routes_prefix=(val); end

    # source://activestorage//lib/active_storage.rb#352
    def service_urls_expire_in; end

    # source://activestorage//lib/active_storage.rb#352
    def service_urls_expire_in=(val); end

    # source://activestorage//lib/active_storage.rb#61
    def supported_image_processing_methods; end

    # source://activestorage//lib/active_storage.rb#61
    def supported_image_processing_methods=(val); end

    # source://railties/6.1.7/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://activestorage//lib/active_storage.rb#359
    def track_variants; end

    # source://activestorage//lib/active_storage.rb#359
    def track_variants=(val); end

    # source://activestorage//lib/active_storage.rb#350
    def unsupported_image_processing_arguments; end

    # source://activestorage//lib/active_storage.rb#350
    def unsupported_image_processing_arguments=(val); end

    # source://railties/6.1.7/lib/rails/engine.rb#401
    def use_relative_model_naming?; end

    # source://activestorage//lib/active_storage.rb#55
    def variable_content_types; end

    # source://activestorage//lib/active_storage.rb#55
    def variable_content_types=(val); end

    # source://activestorage//lib/active_storage.rb#46
    def variant_processor; end

    # source://activestorage//lib/active_storage.rb#46
    def variant_processor=(val); end

    # source://activestorage//lib/active_storage.rb#45
    def verifier; end

    # source://activestorage//lib/active_storage.rb#45
    def verifier=(val); end

    # Returns the version of the currently loaded ActiveStorage as a <tt>Gem::Version</tt>
    #
    # source://activestorage//lib/active_storage/version.rb#7
    def version; end

    # source://activestorage//lib/active_storage.rb#361
    def video_preview_arguments; end

    # source://activestorage//lib/active_storage.rb#361
    def video_preview_arguments=(val); end

    # source://activestorage//lib/active_storage.rb#56
    def web_image_content_types; end

    # source://activestorage//lib/active_storage.rb#56
    def web_image_content_types=(val); end
  end
end

class ActiveStorage::AnalyzeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  class << self
    # source://activejob/6.1.7/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activesupport/6.1.7/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

# This is an abstract base class for analyzers, which extract metadata from blobs. See
# ActiveStorage::Analyzer::ImageAnalyzer for an example of a concrete subclass.
#
# source://activestorage//lib/active_storage/analyzer.rb#6
class ActiveStorage::Analyzer
  # @return [Analyzer] a new instance of Analyzer
  #
  # source://activestorage//lib/active_storage/analyzer.rb#21
  def initialize(blob); end

  # Returns the value of attribute blob.
  #
  # source://activestorage//lib/active_storage/analyzer.rb#7
  def blob; end

  # Override this method in a concrete subclass. Have it return a Hash of metadata.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/analyzer.rb#26
  def metadata; end

  private

  # Downloads the blob to a tempfile on disk. Yields the tempfile.
  #
  # source://activestorage//lib/active_storage/analyzer.rb#32
  def download_blob_to_tempfile(&block); end

  # source://activestorage//lib/active_storage/analyzer.rb#36
  def logger; end

  # source://activestorage//lib/active_storage/analyzer.rb#40
  def tmpdir; end

  class << self
    # Implement this method in a concrete subclass. Have it return true when given a blob from which
    # the analyzer can extract metadata.
    #
    # @return [Boolean]
    #
    # source://activestorage//lib/active_storage/analyzer.rb#11
    def accept?(blob); end

    # Implement this method in concrete subclasses. It will determine if blob analysis
    # should be done in a job or performed inline. By default, analysis is enqueued in a job.
    #
    # @return [Boolean]
    #
    # source://activestorage//lib/active_storage/analyzer.rb#17
    def analyze_later?; end
  end
end

# source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#15
class ActiveStorage::Analyzer::ImageAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#20
  def metadata; end

  private

  # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#31
  def read_image; end

  # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#51
  def rotated_image?(image); end

  class << self
    # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#16
    def accept?(blob); end
  end
end

# source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#4
class ActiveStorage::Analyzer::NullAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#13
  def metadata; end

  class << self
    # source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#5
    def accept?(blob); end

    # source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#9
    def analyze_later?; end
  end
end

# source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#20
class ActiveStorage::Analyzer::VideoAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#25
  def metadata; end

  private

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#51
  def angle; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#71
  def computed_height; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#102
  def container; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#55
  def display_aspect_ratio; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#85
  def display_height_scale; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#46
  def duration; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#81
  def encoded_height; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#77
  def encoded_width; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#125
  def ffprobe_path; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#38
  def height; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#106
  def probe; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#110
  def probe_from(file); end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#67
  def rotated?; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#98
  def streams; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#90
  def tags; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#94
  def video_stream; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#30
  def width; end

  class << self
    # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#21
    def accept?(blob); end
  end
end

# Abstract base class for the concrete ActiveStorage::Attached::One and ActiveStorage::Attached::Many
# classes that both provide proxy access to the blob association for a record.
#
# source://activestorage//lib/active_storage/attached.rb#8
class ActiveStorage::Attached
  # @return [Attached] a new instance of Attached
  #
  # source://activestorage//lib/active_storage/attached.rb#11
  def initialize(name, record); end

  # Returns the value of attribute name.
  #
  # source://activestorage//lib/active_storage/attached.rb#9
  def name; end

  # Returns the value of attribute record.
  #
  # source://activestorage//lib/active_storage/attached.rb#9
  def record; end

  private

  # source://activestorage//lib/active_storage/attached.rb#16
  def change; end
end

# source://activestorage//lib/active_storage/attached/changes.rb#4
module ActiveStorage::Attached::Changes
  extend ::ActiveSupport::Autoload
end

# source://activestorage//lib/active_storage/attached/changes/create_many.rb#4
class ActiveStorage::Attached::Changes::CreateMany
  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#7
  def initialize(name, record, attachables); end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#5
  def attachables; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#12
  def attachments; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#16
  def blobs; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#5
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#5
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#24
  def save; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#20
  def upload; end

  private

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#39
  def assign_associated_attachments; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#34
  def build_subchange_from(attachable); end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#43
  def reset_associated_blobs; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#30
  def subchanges; end
end

# source://activestorage//lib/active_storage/attached/changes/create_one.rb#7
class ActiveStorage::Attached::Changes::CreateOne
  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#10
  def initialize(name, record, attachable); end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#8
  def attachable; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#15
  def attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#19
  def blob; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#8
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#8
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#32
  def save; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#23
  def upload; end

  private

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#78
  def attachment_service_name; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#48
  def build_attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#42
  def find_attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#38
  def find_or_build_attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#52
  def find_or_build_blob; end
end

# source://activestorage//lib/active_storage/attached/changes/create_one_of_many.rb#4
class ActiveStorage::Attached::Changes::CreateOneOfMany < ::ActiveStorage::Attached::Changes::CreateOne
  private

  # source://activestorage//lib/active_storage/attached/changes/create_one_of_many.rb#6
  def find_attachment; end
end

# source://activestorage//lib/active_storage/attached/changes/delete_many.rb#4
class ActiveStorage::Attached::Changes::DeleteMany
  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#7
  def initialize(name, record); end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#11
  def attachables; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#15
  def attachments; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#19
  def blobs; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#5
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#5
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#23
  def save; end
end

# source://activestorage//lib/active_storage/attached/changes/delete_one.rb#4
class ActiveStorage::Attached::Changes::DeleteOne
  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#7
  def initialize(name, record); end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#11
  def attachment; end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#5
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#5
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#15
  def save; end
end

# source://activestorage//lib/active_storage/attached/many.rb#5
class ActiveStorage::Attached::Many < ::ActiveStorage::Attached
  # source://activestorage//lib/active_storage/attached/many.rb#30
  def attach(*attachables); end

  # source://activestorage//lib/active_storage/attached/many.rb#46
  def attached?; end

  # source://activestorage//lib/active_storage/attached/many.rb#11
  def attachments; end

  # source://activestorage//lib/active_storage/attached/many.rb#16
  def blobs; end

  # source://activestorage//lib/active_storage/attached/many.rb#51
  def detach; end

  # source://activesupport/6.1.7/lib/active_support/core_ext/module/delegation.rb#308
  def method_missing(method, *args, &block); end

  private

  # source://activesupport/6.1.7/lib/active_support/core_ext/module/delegation.rb#300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activestorage//lib/active_storage/attached/model.rb#7
module ActiveStorage::Attached::Model
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveStorage::Attached::Model::ClassMethods

  # source://activestorage//lib/active_storage/attached/model.rb#194
  def attachment_changes; end

  # source://activestorage//lib/active_storage/attached/model.rb#198
  def changed_for_autosave?; end

  # source://activestorage//lib/active_storage/attached/model.rb#208
  def reload(*_arg0); end

  private

  # source://activestorage//lib/active_storage/attached/model.rb#202
  def initialize_dup(*_arg0); end
end

# source://activestorage//lib/active_storage/attached/model.rb#0
module ActiveStorage::Attached::Model::ClassMethods
  # source://activestorage//lib/active_storage/attached/model.rb#128
  def has_many_attached(name, dependent: T.unsafe(nil), service: T.unsafe(nil), strict_loading: T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/attached/model.rb#50
  def has_one_attached(name, dependent: T.unsafe(nil), service: T.unsafe(nil), strict_loading: T.unsafe(nil)); end

  private

  # source://activestorage//lib/active_storage/attached/model.rb#185
  def validate_service_configuration(association_name, service); end
end

# source://activestorage//lib/active_storage/attached/one.rb#5
class ActiveStorage::Attached::One < ::ActiveStorage::Attached
  # source://activestorage//lib/active_storage/attached/one.rb#30
  def attach(attachable); end

  # source://activestorage//lib/active_storage/attached/one.rb#46
  def attached?; end

  # source://activestorage//lib/active_storage/attached/one.rb#12
  def attachment; end

  # source://activestorage//lib/active_storage/attached/one.rb#16
  def blank?; end

  # source://activestorage//lib/active_storage/attached/one.rb#51
  def detach; end

  # source://activesupport/6.1.7/lib/active_support/core_ext/module/delegation.rb#308
  def method_missing(method, *args, &block); end

  # source://activestorage//lib/active_storage/attached/one.rb#60
  def purge; end

  # source://activestorage//lib/active_storage/attached/one.rb#68
  def purge_later; end

  private

  # source://activesupport/6.1.7/lib/active_support/core_ext/module/delegation.rb#300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/attached/one.rb#76
  def write_attachment(attachment); end
end

class ActiveStorage::Attachment < ::ActiveStorage::Record
  include ::ActiveStorage::Attachment::GeneratedAttributeMethods
  include ::ActiveStorage::Attachment::GeneratedAssociationMethods

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def autosave_associated_records_for_blob(*args); end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def autosave_associated_records_for_record(*args); end

  # source://activesupport/6.1.7/lib/active_support/core_ext/module/delegation.rb#308
  def method_missing(method, *args, &block); end

  def purge; end
  def purge_later; end
  def signed_id(*_arg0, &_arg1); end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def validate_associated_records_for_blob(*args); end

  private

  def analyze_blob_later; end
  def dependent; end
  def mirror_blob_later; end
  def purge_dependent_blob_later; end

  # source://activesupport/6.1.7/lib/active_support/core_ext/module/delegation.rb#300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums; end
  end
end

module ActiveStorage::Attachment::GeneratedAssociationMethods
  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def blob=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#28
  def build_blob(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#32
  def create_blob(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#36
  def create_blob!(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def record; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def record=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_record; end
end

module ActiveStorage::Attachment::GeneratedAttributeMethods; end

class ActiveStorage::BaseController < ::ActionController::Base
  include ::ActiveStorage::SetCurrent

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  def stream(blob); end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.7/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

class ActiveStorage::BaseJob < ::ActiveJob::Base; end

class ActiveStorage::Blob < ::ActiveStorage::Record
  include ::ActiveStorage::Blob::GeneratedAttributeMethods
  include ::ActiveStorage::Blob::GeneratedAssociationMethods
  include ::ActiveStorage::Blob::Analyzable
  include ::ActiveStorage::Blob::Identifiable
  include ::ActiveStorage::Blob::Representable
  include ::ActionText::Attachable
  extend ::ActionText::Attachable::ClassMethods

  # source://actiontext/6.1.7/lib/action_text/engine.rb#33
  def attachable_plain_text_representation(caption = T.unsafe(nil)); end

  def audio?; end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def autosave_associated_records_for_attachments(*args); end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#213
  def autosave_associated_records_for_preview_image_attachment; end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#213
  def autosave_associated_records_for_preview_image_blob; end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def autosave_associated_records_for_variant_records(*args); end

  def content_type_for_serving; end
  def delete; end
  def download(&block); end
  def filename; end
  def forced_disposition_for_serving; end
  def image?; end
  def key; end
  def mirror_later; end
  def open(tmpdir: T.unsafe(nil), &block); end

  # source://actiontext/6.1.7/lib/action_text/engine.rb#29
  def previewable_attachable?; end

  def purge; end
  def purge_later; end

  # source://activerecord/6.1.7/lib/active_record/secure_token.rb#39
  def regenerate_key; end

  def service; end
  def service_headers_for_direct_upload; end

  # source://activesupport/6.1.7/lib/active_support/deprecation/method_wrappers.rb#63
  def service_url(*args, &block); end

  def service_url_for_direct_upload(expires_in: T.unsafe(nil)); end
  def services; end
  def services=(_arg0); end
  def services?; end
  def signed_id; end
  def text?; end

  # source://actiontext/6.1.7/lib/action_text/engine.rb#37
  def to_trix_content_attachment_partial_path; end

  def unfurl(io, identify: T.unsafe(nil)); end
  def upload(io, identify: T.unsafe(nil)); end
  def upload_without_unfurling(io); end
  def url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil), filename: T.unsafe(nil), **options); end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def validate_associated_records_for_attachments(*args); end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def validate_associated_records_for_variant_records(*args); end

  def video?; end

  private

  def allowed_inline?; end
  def compute_checksum_in_chunks(io); end
  def extract_content_type(io); end
  def forcibly_serve_as_binary?; end
  def service_metadata; end
  def update_service_metadata; end
  def web_image?; end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_add_for_attachments; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_add_for_attachments=(value); end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_add_for_variant_records; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_add_for_variant_records=(value); end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_remove_for_attachments; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_remove_for_attachments=(value); end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_remove_for_variant_records; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def after_remove_for_variant_records=(value); end

    # source://activestorage//lib/active_storage/reflection.rb#43
    def attachment_reflections; end

    # source://activerecord/6.1.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_add_for_attachments; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_add_for_attachments=(value); end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_add_for_variant_records; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_add_for_variant_records=(value); end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_remove_for_attachments; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_remove_for_attachments=(value); end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_remove_for_variant_records; end

    # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#34
    def before_remove_for_variant_records=(value); end

    def build_after_unfurling(io:, filename:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end

    # source://activesupport/6.1.7/lib/active_support/deprecation/method_wrappers.rb#63
    def build_after_upload(*args, &block); end

    def combine_signed_id_purposes(purpose); end
    def create_after_unfurling!(io:, filename:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end

    # source://activesupport/6.1.7/lib/active_support/deprecation/method_wrappers.rb#63
    def create_after_upload!(*args, &block); end

    def create_and_upload!(io:, filename:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end
    def create_before_direct_upload!(filename:, byte_size:, checksum:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), record: T.unsafe(nil)); end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums; end

    def find_signed(id, record: T.unsafe(nil), purpose: T.unsafe(nil)); end
    def find_signed!(id, record: T.unsafe(nil), purpose: T.unsafe(nil)); end
    def generate_unique_secure_token(length: T.unsafe(nil)); end
    def service; end
    def service=(value); end
    def service?; end
    def services; end
    def services=(value); end
    def services?; end
    def signed_id_verifier; end

    # source://activerecord/6.1.7/lib/active_record/scoping/named.rb#175
    def unattached(*args); end

    # source://activerecord/6.1.7/lib/active_record/scoping/named.rb#175
    def with_attached_preview_image(*args); end
  end
end

module ActiveStorage::Blob::Analyzable
  def analyze; end
  def analyze_later; end
  def analyzed?; end

  private

  def analyzer; end
  def analyzer_class; end
  def extract_metadata_via_analyzer; end
end

module ActiveStorage::Blob::GeneratedAssociationMethods
  # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#55
  def attachment_ids; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#65
  def attachment_ids=(ids); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def attachments; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def attachments=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#28
  def build_preview_image_attachment(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#32
  def create_preview_image_attachment(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#36
  def create_preview_image_attachment!(*args, &block); end

  # source://activestorage//lib/active_storage/attached/model.rb#55
  def preview_image; end

  # source://activestorage//lib/active_storage/attached/model.rb#60
  def preview_image=(attachable); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def preview_image_attachment; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def preview_image_attachment=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def preview_image_blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def preview_image_blob=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_preview_image_attachment; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_preview_image_blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#55
  def variant_record_ids; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/collection_association.rb#65
  def variant_record_ids=(ids); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def variant_records; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def variant_records=(value); end
end

module ActiveStorage::Blob::GeneratedAttributeMethods; end

module ActiveStorage::Blob::Identifiable
  def identified?; end
  def identify; end
  def identify_without_saving; end

  private

  def download_identifiable_chunk; end
  def identify_content_type; end
end

ActiveStorage::Blob::MINIMUM_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

module ActiveStorage::Blob::Representable
  extend ::ActiveSupport::Concern

  def preview(transformations); end
  def previewable?; end
  def representable?; end
  def representation(transformations); end
  def variable?; end
  def variant(transformations); end

  private

  def default_variant_format; end
  def default_variant_transformations; end
  def format; end
  def variant_class; end
end

module ActiveStorage::Blobs; end

class ActiveStorage::Blobs::ProxyController < ::ActiveStorage::BaseController
  include ::ActiveStorage::SetBlob
  include ::ActiveStorage::SetHeaders

  def show; end

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

class ActiveStorage::Blobs::RedirectController < ::ActiveStorage::BaseController
  include ::ActiveStorage::SetBlob

  def show; end

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

class ActiveStorage::Current < ::ActiveSupport::CurrentAttributes
  class << self
    # source://activesupport/6.1.7/lib/active_support/current_attributes.rb#114
    def host; end

    # source://activesupport/6.1.7/lib/active_support/current_attributes.rb#118
    def host=(attribute); end
  end
end

class ActiveStorage::DirectUploadsController < ::ActiveStorage::BaseController
  def create; end

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  def blob_args; end
  def direct_upload_json(blob); end

  class << self
    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

class ActiveStorage::DiskController < ::ActiveStorage::BaseController
  include ::ActiveStorage::FileServer

  def show; end
  def update; end

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  def acceptable_content?(token); end
  def decode_verified_key; end
  def decode_verified_token; end
  def named_disk_service(name); end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

# source://activestorage//lib/active_storage/downloader.rb#4
class ActiveStorage::Downloader
  # @return [Downloader] a new instance of Downloader
  #
  # source://activestorage//lib/active_storage/downloader.rb#7
  def initialize(service); end

  # source://activestorage//lib/active_storage/downloader.rb#11
  def open(key, checksum:, name: T.unsafe(nil), tmpdir: T.unsafe(nil)); end

  # Returns the value of attribute service.
  #
  # source://activestorage//lib/active_storage/downloader.rb#5
  def service; end

  private

  # source://activestorage//lib/active_storage/downloader.rb#30
  def download(key, file); end

  # source://activestorage//lib/active_storage/downloader.rb#20
  def open_tempfile(name, tmpdir = T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/downloader.rb#37
  def verify_integrity_of(file, checksum:); end
end

# source://activestorage//lib/active_storage/engine.rb#22
class ActiveStorage::Engine < ::Rails::Engine
  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end
  end
end

# Generic base class for all Active Storage exceptions.
#
# source://activestorage//lib/active_storage/errors.rb#5
class ActiveStorage::Error < ::StandardError; end

# Raised when ActiveStorage::Blob#download is called on a blob where the
# backing file is no longer present in its service.
#
# source://activestorage//lib/active_storage/errors.rb#25
class ActiveStorage::FileNotFoundError < ::ActiveStorage::Error; end

module ActiveStorage::FileServer
  private

  def serve_file(path, content_type:, disposition:); end
end

class ActiveStorage::Filename
  include ::Comparable

  def initialize(filename); end

  def <=>(other); end
  def as_json(*_arg0); end
  def base; end
  def extension; end
  def extension_with_delimiter; end
  def extension_without_delimiter; end
  def sanitized; end
  def to_json; end
  def to_s; end

  class << self
    def wrap(filename); end
  end
end

# Raised when uploaded or downloaded data does not match a precomputed checksum.
# Indicates that a network error or a software bug caused data corruption.
#
# source://activestorage//lib/active_storage/errors.rb#21
class ActiveStorage::IntegrityError < ::ActiveStorage::Error; end

# Raised when ActiveStorage::Blob#variant is called on a blob that isn't variable.
# Use ActiveStorage::Blob#variable? to determine whether a blob is variable.
#
# source://activestorage//lib/active_storage/errors.rb#9
class ActiveStorage::InvariableError < ::ActiveStorage::Error; end

# source://activestorage//lib/active_storage/log_subscriber.rb#6
class ActiveStorage::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activestorage//lib/active_storage/log_subscriber.rb#41
  def logger; end

  # source://activestorage//lib/active_storage/log_subscriber.rb#19
  def service_delete(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#23
  def service_delete_prefixed(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#13
  def service_download(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#27
  def service_exist(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#35
  def service_mirror(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#13
  def service_streaming_download(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#7
  def service_upload(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#31
  def service_url(event); end

  private

  # source://activestorage//lib/active_storage/log_subscriber.rb#50
  def debug(event, colored_message); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#46
  def info(event, colored_message); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#58
  def key_in(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#54
  def log_prefix_for_service(event); end
end

class ActiveStorage::MirrorJob < ::ActiveStorage::BaseJob
  def perform(key, checksum:); end

  class << self
    # source://activejob/6.1.7/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activesupport/6.1.7/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

class ActiveStorage::Preview
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def download(&block); end
  def image; end
  def key; end
  def processed; end

  # source://activesupport/6.1.7/lib/active_support/deprecation/method_wrappers.rb#63
  def service_url(*args, &block); end

  def url(**options); end
  def variation; end

  private

  def previewer; end
  def previewer_class; end
  def process; end
  def processed?; end
  def variant; end
end

class ActiveStorage::Preview::UnprocessedError < ::StandardError; end

# Raised when a Previewer is unable to generate a preview image.
#
# source://activestorage//lib/active_storage/errors.rb#28
class ActiveStorage::PreviewError < ::ActiveStorage::Error; end

# This is an abstract base class for previewers, which generate images from blobs. See
# ActiveStorage::Previewer::MuPDFPreviewer and ActiveStorage::Previewer::VideoPreviewer for
# examples of concrete subclasses.
#
# source://activestorage//lib/active_storage/previewer.rb#7
class ActiveStorage::Previewer
  # @return [Previewer] a new instance of Previewer
  #
  # source://activestorage//lib/active_storage/previewer.rb#16
  def initialize(blob); end

  # Returns the value of attribute blob.
  #
  # source://activestorage//lib/active_storage/previewer.rb#8
  def blob; end

  # Override this method in a concrete subclass. Have it yield an attachable preview image (i.e.
  # anything accepted by ActiveStorage::Attached::One#attach). Pass the additional options to
  # the underlying blob that is created.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/previewer.rb#23
  def preview(**options); end

  private

  # source://activestorage//lib/active_storage/previewer.rb#71
  def capture(*argv, to:); end

  # Downloads the blob to a tempfile on disk. Yields the tempfile.
  #
  # source://activestorage//lib/active_storage/previewer.rb#29
  def download_blob_to_tempfile(&block); end

  # Executes a system command, capturing its binary output in a tempfile. Yields the tempfile.
  #
  # Use this method to shell out to a system library (e.g. muPDF or FFmpeg) for preview image
  # generation. The resulting tempfile can be used as the +:io+ value in an attachable Hash:
  #
  #   def preview
  #     download_blob_to_tempfile do |input|
  #       draw "my-drawing-command", input.path, "--format", "png", "-" do |output|
  #         yield io: output, filename: "#{blob.filename.base}.png", content_type: "image/png"
  #       end
  #     end
  #   end
  #
  # The output tempfile is opened in the directory returned by #tmpdir.
  #
  # source://activestorage//lib/active_storage/previewer.rb#47
  def draw(*argv); end

  # source://activestorage//lib/active_storage/previewer.rb#67
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # source://activestorage//lib/active_storage/previewer.rb#86
  def logger; end

  # source://activestorage//lib/active_storage/previewer.rb#57
  def open_tempfile; end

  # source://activestorage//lib/active_storage/previewer.rb#90
  def tmpdir; end

  class << self
    # Implement this method in a concrete subclass. Have it return true when given a blob from which
    # the previewer can generate an image.
    #
    # @return [Boolean]
    #
    # source://activestorage//lib/active_storage/previewer.rb#12
    def accept?(blob); end
  end
end

# source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#4
class ActiveStorage::Previewer::MuPDFPreviewer < ::ActiveStorage::Previewer
  # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#23
  def preview(**options); end

  private

  # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#32
  def draw_first_page_from(file, &block); end

  class << self
    # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#6
    def accept?(blob); end

    # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#14
    def mutool_exists?; end

    # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#10
    def mutool_path; end
  end
end

# source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#4
class ActiveStorage::Previewer::PopplerPDFPreviewer < ::ActiveStorage::Previewer
  # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#21
  def preview(**options); end

  private

  # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#30
  def draw_first_page_from(file, &block); end

  class << self
    # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#6
    def accept?(blob); end

    # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#14
    def pdftoppm_exists?; end

    # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#10
    def pdftoppm_path; end
  end
end

# source://activestorage//lib/active_storage/previewer/video_previewer.rb#6
class ActiveStorage::Previewer::VideoPreviewer < ::ActiveStorage::Previewer
  # source://activestorage//lib/active_storage/previewer/video_previewer.rb#23
  def preview(**options); end

  private

  # source://activestorage//lib/active_storage/previewer/video_previewer.rb#32
  def draw_relevant_frame_from(file, &block); end

  class << self
    # source://activestorage//lib/active_storage/previewer/video_previewer.rb#8
    def accept?(blob); end

    # source://activestorage//lib/active_storage/previewer/video_previewer.rb#12
    def ffmpeg_exists?; end

    # source://activestorage//lib/active_storage/previewer/video_previewer.rb#18
    def ffmpeg_path; end
  end
end

class ActiveStorage::PurgeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  class << self
    # source://activejob/6.1.7/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activesupport/6.1.7/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

class ActiveStorage::Record < ::ActiveRecord::Base
  include ::ActiveStorage::Record::GeneratedAttributeMethods
  include ::ActiveStorage::Record::GeneratedAssociationMethods

  class << self
    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums; end
  end
end

module ActiveStorage::Record::GeneratedAssociationMethods; end
module ActiveStorage::Record::GeneratedAttributeMethods; end

# source://activestorage//lib/active_storage/reflection.rb#4
module ActiveStorage::Reflection; end

# source://activestorage//lib/active_storage/reflection.rb#39
module ActiveStorage::Reflection::ActiveRecordExtensions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods

  module GeneratedClassMethods
    def attachment_reflections; end
    def attachment_reflections=(value); end
    def attachment_reflections?; end
  end

  module GeneratedInstanceMethods
    def attachment_reflections; end
    def attachment_reflections?; end
  end
end

# source://activestorage//lib/active_storage/reflection.rb#46
module ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods
  # Returns an array of reflection objects for all the attachments in the
  # class.
  #
  # source://activestorage//lib/active_storage/reflection.rb#49
  def reflect_on_all_attachments; end

  # Returns the reflection object for the named +attachment+.
  #
  #    User.reflect_on_attachment(:avatar)
  #    # => the avatar reflection
  #
  # source://activestorage//lib/active_storage/reflection.rb#58
  def reflect_on_attachment(attachment); end
end

# Holds all the metadata about a has_many_attached attachment as it was
# specified in the Active Record class.
#
# source://activestorage//lib/active_storage/reflection.rb#15
class ActiveStorage::Reflection::HasManyAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activestorage//lib/active_storage/reflection.rb#16
  def macro; end
end

# Holds all the metadata about a has_one_attached attachment as it was
# specified in the Active Record class.
#
# source://activestorage//lib/active_storage/reflection.rb#7
class ActiveStorage::Reflection::HasOneAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activestorage//lib/active_storage/reflection.rb#8
  def macro; end
end

# source://activestorage//lib/active_storage/reflection.rb#21
module ActiveStorage::Reflection::ReflectionExtension
  # source://activestorage//lib/active_storage/reflection.rb#22
  def add_attachment_reflection(model, name, reflection); end

  private

  # source://activestorage//lib/active_storage/reflection.rb#27
  def reflection_class_for(macro); end
end

module ActiveStorage::Representations; end

class ActiveStorage::Representations::BaseController < ::ActiveStorage::BaseController
  include ::ActiveStorage::SetBlob

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  def set_representation; end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

class ActiveStorage::Representations::ProxyController < ::ActiveStorage::Representations::BaseController
  include ::ActiveStorage::SetHeaders

  def show; end

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

class ActiveStorage::Representations::RedirectController < ::ActiveStorage::Representations::BaseController
  def show; end

  private

  # source://actionview/6.1.7/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/6.1.7/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

# Abstract class serving as an interface for concrete services.
#
# The available services are:
#
# * +Disk+, to manage attachments saved directly on the hard drive.
# * +GCS+, to manage attachments through Google Cloud Storage.
# * +S3+, to manage attachments through Amazon S3.
# * +AzureStorage+, to manage attachments through Microsoft Azure Storage.
# * +Mirror+, to be able to use several services to manage attachments.
#
# Inside a Rails application, you can set-up your services through the
# generated <tt>config/storage.yml</tt> file and reference one
# of the aforementioned constant under the +service+ key. For example:
#
#   local:
#     service: Disk
#     root: <%= Rails.root.join("storage") %>
#
# You can checkout the service's constructor to know which keys are required.
#
# Then, in your application's configuration, you can specify the service to
# use like this:
#
#   config.active_storage.service = :local
#
# If you are using Active Storage outside of a Ruby on Rails application, you
# can configure the service to use like this:
#
#   ActiveStorage::Blob.service = ActiveStorage::Service.configure(
#     :Disk,
#     root: Pathname("/foo/bar/storage")
#   )
#
# source://activestorage//lib/active_storage/service.rb#41
class ActiveStorage::Service
  extend ::ActiveSupport::Autoload

  # Delete the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#94
  def delete(key); end

  # Delete files at keys starting with the +prefix+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#99
  def delete_prefixed(prefix); end

  # Return the content of the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#80
  def download(key); end

  # Return the partial content in the byte +range+ of the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#85
  def download_chunk(key, range); end

  # Return +true+ if a file exists at the +key+.
  #
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://activestorage//lib/active_storage/service.rb#104
  def exist?(key); end

  # Returns a Hash of headers for +url_for_direct_upload+ requests.
  #
  # source://activestorage//lib/active_storage/service.rb#136
  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end

  # Returns the value of attribute name.
  #
  # source://activestorage//lib/active_storage/service.rb#44
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://activestorage//lib/active_storage/service.rb#44
  def name=(_arg0); end

  # source://activestorage//lib/active_storage/service.rb#89
  def open(*args, **options, &block); end

  # @return [Boolean]
  #
  # source://activestorage//lib/active_storage/service.rb#140
  def public?; end

  # Update metadata for the file identified by +key+ in the service.
  # Override in subclasses only if the service needs to store specific
  # metadata that has to be updated upon identification.
  #
  # source://activestorage//lib/active_storage/service.rb#76
  def update_metadata(key, **metadata); end

  # Upload the +io+ to the +key+ specified. If a +checksum+ is provided, the service will
  # ensure a match when the upload has completed or raise an ActiveStorage::IntegrityError.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#69
  def upload(key, io, checksum: T.unsafe(nil), **options); end

  # Returns the URL for the file at the +key+. This returns a permanent URL for public files, and returns a
  # short-lived URL for private files. For private files you can provide the +disposition+ (+:inline+ or +:attachment+),
  # +filename+, and +content_type+ that you wish the file to be served with on request. Additionally, you can also provide
  # the amount of seconds the URL will be valid for, specified in +expires_in+.
  #
  # source://activestorage//lib/active_storage/service.rb#112
  def url(key, **options); end

  # Returns a signed, temporary URL that a direct upload file can be PUT to on the +key+.
  # The URL will be valid for the amount of seconds specified in +expires_in+.
  # You must also provide the +content_type+, +content_length+, and +checksum+ of the file
  # that will be uploaded. All these attributes will be validated by the service upon upload.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#131
  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end

  private

  # source://activestorage//lib/active_storage/service.rb#165
  def content_disposition_with(filename:, type: T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/service.rb#154
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#145
  def private_url(key, expires_in:, filename:, disposition:, content_type:, **_arg5); end

  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#149
  def public_url(key, **_arg1); end

  # source://activestorage//lib/active_storage/service.rb#160
  def service_name; end

  class << self
    # Override in subclasses that stitch together multiple services and hence
    # need to build additional services using the configurator.
    #
    # Passes the configurator and all of the service's config as keyword args.
    #
    # See MirrorService for an example.
    #
    # source://activestorage//lib/active_storage/service.rb#60
    def build(configurator:, name:, service: T.unsafe(nil), **service_config); end

    # Configure an Active Storage service by name from a set of configurations,
    # typically loaded from a YAML file. The Active Storage engine uses this
    # to set the global Active Storage service when the app boots.
    #
    # source://activestorage//lib/active_storage/service.rb#50
    def configure(service_name, configurations); end
  end
end

# source://activestorage//lib/active_storage/service/configurator.rb#4
class ActiveStorage::Service::Configurator
  # source://activestorage//lib/active_storage/service/configurator.rb#11
  def initialize(configurations); end

  # source://activestorage//lib/active_storage/service/configurator.rb#15
  def build(service_name); end

  # source://activestorage//lib/active_storage/service/configurator.rb#5
  def configurations; end

  private

  # source://activestorage//lib/active_storage/service/configurator.rb#23
  def config_for(name); end

  # source://activestorage//lib/active_storage/service/configurator.rb#29
  def resolve(class_name); end

  class << self
    # source://activestorage//lib/active_storage/service/configurator.rb#7
    def build(service_name, configurations); end
  end
end

# source://activestorage//lib/active_storage/service/registry.rb#4
class ActiveStorage::Service::Registry
  # source://activestorage//lib/active_storage/service/registry.rb#5
  def initialize(configurations); end

  # source://activestorage//lib/active_storage/service/registry.rb#10
  def fetch(name); end

  private

  # source://activestorage//lib/active_storage/service/registry.rb#26
  def configurations; end

  # source://activestorage//lib/active_storage/service/registry.rb#28
  def configurator; end

  # source://activestorage//lib/active_storage/service/registry.rb#26
  def services; end
end

module ActiveStorage::SetBlob
  extend ::ActiveSupport::Concern

  private

  def set_blob; end
end

module ActiveStorage::SetCurrent
  extend ::ActiveSupport::Concern
end

module ActiveStorage::SetHeaders
  extend ::ActiveSupport::Concern

  private

  def set_content_headers_from(blob); end
end

# source://activestorage//lib/active_storage.rb#363
module ActiveStorage::Transformers
  extend ::ActiveSupport::Autoload
end

# A Transformer applies a set of transformations to an image.
#
# The following concrete subclasses are included in Active Storage:
#
# * ActiveStorage::Transformers::ImageProcessingTransformer:
#   backed by ImageProcessing, a common interface for MiniMagick and ruby-vips
#
# source://activestorage//lib/active_storage/transformers/transformer.rb#11
class ActiveStorage::Transformers::Transformer
  # @return [Transformer] a new instance of Transformer
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#14
  def initialize(transformations); end

  # Applies the transformations to the source image in +file+, producing a target image in the
  # specified +format+. Yields an open Tempfile containing the target image. Closes and unlinks
  # the output tempfile after yielding to the given block. Returns the result of the block.
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#21
  def transform(file, format:); end

  # Returns the value of attribute transformations.
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#12
  def transformations; end

  private

  # Returns an open Tempfile containing a transformed image in the given +format+.
  # All subclasses implement this method.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#34
  def process(file, format:); end
end

# Raised when ActiveStorage::Blob#preview is called on a blob that isn't previewable.
# Use ActiveStorage::Blob#previewable? to determine whether a blob is previewable.
#
# source://activestorage//lib/active_storage/errors.rb#13
class ActiveStorage::UnpreviewableError < ::ActiveStorage::Error; end

# Raised when ActiveStorage::Blob#representation is called on a blob that isn't representable.
# Use ActiveStorage::Blob#representable? to determine whether a blob is representable.
#
# source://activestorage//lib/active_storage/errors.rb#17
class ActiveStorage::UnrepresentableError < ::ActiveStorage::Error; end

# source://activestorage//lib/active_storage/gem_version.rb#9
module ActiveStorage::VERSION; end

# source://activestorage//lib/active_storage/gem_version.rb#10
ActiveStorage::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activestorage//lib/active_storage/gem_version.rb#11
ActiveStorage::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activestorage//lib/active_storage/gem_version.rb#13
ActiveStorage::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://activestorage//lib/active_storage/gem_version.rb#15
ActiveStorage::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activestorage//lib/active_storage/gem_version.rb#12
ActiveStorage::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class ActiveStorage::Variant
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def content_type(*_arg0, &_arg1); end
  def content_type_for_serving(*_arg0, &_arg1); end
  def download(&block); end
  def filename; end
  def forced_disposition_for_serving; end
  def image; end
  def key; end
  def processed; end
  def service(*_arg0, &_arg1); end

  # source://activesupport/6.1.7/lib/active_support/deprecation/method_wrappers.rb#63
  def service_url(*args, &block); end

  def url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil)); end
  def variation; end

  private

  def process; end
  def processed?; end
end

class ActiveStorage::VariantRecord < ::ActiveStorage::Record
  include ::ActiveStorage::VariantRecord::GeneratedAttributeMethods
  include ::ActiveStorage::VariantRecord::GeneratedAssociationMethods

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#175
  def autosave_associated_records_for_blob(*args); end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#213
  def autosave_associated_records_for_image_attachment; end

  # source://activerecord/6.1.7/lib/active_record/autosave_association.rb#213
  def autosave_associated_records_for_image_blob; end

  class << self
    # source://activesupport/6.1.7/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activerecord/6.1.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/6.1.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activestorage//lib/active_storage/reflection.rb#43
    def attachment_reflections; end

    # source://activerecord/6.1.7/lib/active_record/enum.rb#109
    def defined_enums; end

    # source://activerecord/6.1.7/lib/active_record/scoping/named.rb#175
    def with_attached_image(*args); end
  end
end

module ActiveStorage::VariantRecord::GeneratedAssociationMethods
  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def blob=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#28
  def build_blob(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#28
  def build_image_attachment(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#32
  def create_blob(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#36
  def create_blob!(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#32
  def create_image_attachment(*args, &block); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#36
  def create_image_attachment!(*args, &block); end

  # source://activestorage//lib/active_storage/attached/model.rb#55
  def image; end

  # source://activestorage//lib/active_storage/attached/model.rb#60
  def image=(attachable); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def image_attachment; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def image_attachment=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#102
  def image_blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/association.rb#110
  def image_blob=(value); end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_blob; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_image_attachment; end

  # source://activerecord/6.1.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_image_blob; end
end

module ActiveStorage::VariantRecord::GeneratedAttributeMethods; end

class ActiveStorage::VariantWithRecord
  def initialize(blob, variation); end

  def blob; end
  def download(*_arg0, &_arg1); end
  def image; end
  def key(*_arg0, &_arg1); end
  def process; end
  def processed; end
  def processed?; end

  # source://activesupport/6.1.7/lib/active_support/deprecation/method_wrappers.rb#63
  def service_url(*args, &block); end

  def url(*_arg0, &_arg1); end
  def variation; end

  private

  def create_or_find_record(image:); end
  def record; end
  def transform_blob; end
end

class ActiveStorage::Variation
  def initialize(transformations); end

  def content_type; end
  def default_to(defaults); end
  def digest; end
  def format; end
  def key; end
  def transform(file, &block); end
  def transformations; end

  private

  def transformer; end

  class << self
    def decode(key); end
    def encode(transformations); end
    def wrap(variator); end
  end
end
