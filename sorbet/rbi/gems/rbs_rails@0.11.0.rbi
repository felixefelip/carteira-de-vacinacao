# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbs_rails` gem.
# Please instead update this file by running `bin/tapioca gem rbs_rails`.

# source://rbs_rails//lib/rbs_rails/version.rb#1
module RbsRails
  class << self
    # source://rbs_rails//lib/rbs_rails.rb#14
    def copy_signatures(to:); end
  end
end

# source://rbs_rails//lib/rbs_rails/active_record.rb#2
module RbsRails::ActiveRecord
  class << self
    # source://rbs_rails//lib/rbs_rails/active_record.rb#10
    def class_to_rbs(klass, dependencies: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://rbs_rails//lib/rbs_rails/active_record.rb#4
    def generatable?(klass); end
  end
end

# source://rbs_rails//lib/rbs_rails/active_record.rb#14
class RbsRails::ActiveRecord::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://rbs_rails//lib/rbs_rails/active_record.rb#15
  def initialize(klass, dependencies:); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#24
  def generate; end

  private

  # source://rbs_rails//lib/rbs_rails/active_record.rb#428
  def args_to_type(args_node); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#115
  def associations; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#158
  def belongs_to; end

  # We need static analysis to detect enum.
  # ActiveRecord has `defined_enums` method,
  # but it does not contain _prefix and _suffix information.
  #
  # source://rbs_rails//lib/rbs_rails/active_record.rb#355
  def build_enum_definitions; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#81
  def collection_proxy_decl; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#483
  def columns; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#245
  def delegated_type_definitions; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#224
  def delegated_type_instance; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#213
  def delegated_type_scope(singleton:); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#348
  def enum_definitions; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#314
  def enum_instance_methods; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#376
  def enum_method_name(hash, name, label); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#332
  def enum_scope_methods(singleton:); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#111
  def footer; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#178
  def generated_association_methods; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#61
  def generated_relation_methods_decl; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#123
  def has_many; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#141
  def has_one; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#284
  def has_secure_password; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#90
  def header; end

  # Returns the value of attribute klass.
  #
  # source://rbs_rails//lib/rbs_rails/active_record.rb#554
  def klass; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#28
  def klass_decl; end

  # Returns the value of attribute klass_name.
  #
  # source://rbs_rails//lib/rbs_rails/active_record.rb#554
  def klass_name; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#521
  def optional(class_name); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#456
  def parse_model_file; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#53
  def pk_type; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#479
  def relation_class_name; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#71
  def relation_decl; end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#394
  def scopes(singleton:); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#525
  def sql_type_to_class(t); end

  # source://rbs_rails//lib/rbs_rails/active_record.rb#469
  def traverse(node, &block); end
end

# source://rbs_rails//lib/rbs_rails/dependency_builder.rb#2
class RbsRails::DependencyBuilder
  # @return [DependencyBuilder] a new instance of DependencyBuilder
  #
  # source://rbs_rails//lib/rbs_rails/dependency_builder.rb#5
  def initialize; end

  # source://rbs_rails//lib/rbs_rails/dependency_builder.rb#10
  def build; end

  # Returns the value of attribute deps.
  #
  # source://rbs_rails//lib/rbs_rails/dependency_builder.rb#3
  def deps; end

  # Returns the value of attribute done.
  #
  # source://rbs_rails//lib/rbs_rails/dependency_builder.rb#3
  def done; end
end

# source://rbs_rails//lib/rbs_rails.rb#12
class RbsRails::Error < ::StandardError; end

# source://rbs_rails//lib/rbs_rails/path_helpers.rb#2
class RbsRails::PathHelpers
  # @return [PathHelpers] a new instance of PathHelpers
  #
  # source://rbs_rails//lib/rbs_rails/path_helpers.rb#7
  def initialize(routes:); end

  # source://rbs_rails//lib/rbs_rails/path_helpers.rb#11
  def generate; end

  private

  # source://rbs_rails//lib/rbs_rails/path_helpers.rb#24
  def helpers; end

  # Returns the value of attribute routes.
  #
  # source://rbs_rails//lib/rbs_rails/path_helpers.rb#30
  def routes; end

  class << self
    # source://rbs_rails//lib/rbs_rails/path_helpers.rb#3
    def generate(routes: T.unsafe(nil)); end
  end
end

# source://rbs_rails//lib/rbs_rails/util.rb#2
module RbsRails::Util
  extend ::RbsRails::Util

  # source://rbs_rails//lib/rbs_rails/util.rb#18
  def format_rbs(rbs); end

  # source://rbs_rails//lib/rbs_rails/util.rb#8
  def module_name(mod); end
end

# source://rbs_rails//lib/rbs_rails/util.rb#3
RbsRails::Util::MODULE_NAME = T.let(T.unsafe(nil), UnboundMethod)

# Because of copy_signatures is defined by lib/rbs_rails.rb
#
# source://rbs_rails//lib/rbs_rails/version.rb#5
RbsRails::VERSION = T.let(T.unsafe(nil), String)
